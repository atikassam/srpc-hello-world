"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectDirectory = exports.ServerPlatforms = exports.ClientPlatforms = void 0;
const fs = require("fs");
const shelljs = require("shelljs");
const path = require("path");
const tmp = require("tmp");
var ClientPlatforms;
(function (ClientPlatforms) {
    ClientPlatforms["WEB"] = "web";
    ClientPlatforms["NODEJS"] = "nodejs";
    // JAVA = 'nodejs',
    // PYTHON = 'nodejs',
    // GO = 'nodejs',
    // CPP = 'cpp',
    // PHP = 'php',
    // CSHARP = 'cSharp',
    // RUBI = 'php',
    // SCALA = 'scala',
})(ClientPlatforms = exports.ClientPlatforms || (exports.ClientPlatforms = {}));
var ServerPlatforms;
(function (ServerPlatforms) {
    ServerPlatforms["NODEJS"] = "nodejs";
    // JAVA = 'nodejs',
    // PYTHON = 'nodejs',
    // GO = 'nodejs',
    // CPP = 'cpp',
    // PHP = 'php',
    // CSHARP = 'cSharp',
    // RUBI = 'php',
    // SCALA = 'scala',
})(ServerPlatforms = exports.ServerPlatforms || (exports.ServerPlatforms = {}));
class ProjectDirectory {
    constructor(options) {
        var _a;
        this.options = options;
        this.funcs = [];
        this.dir = ((_a = options === null || options === void 0 ? void 0 : options.dir) === null || _a === void 0 ? void 0 : _a.trim().length) ? options.dir
            : tmp.dirSync({ mode: 0o750, prefix: 'myTmpDir_' }).name;
        tmp.setGracefulCleanup();
    }
    removeFiles(filenames) {
        for (const filename of Array.isArray(filenames) ? filenames : [filenames]) {
            shelljs.rm(path.join(this.dir, filename));
        }
        return this;
    }
    writeFiles(files) {
        return __awaiter(this, void 0, void 0, function* () {
            const dir = this.dir;
            if (!fs.existsSync(dir))
                shelljs.mkdir('-p', dir);
            return this.runPipe((files) => __awaiter(this, void 0, void 0, function* () {
                for (let file of files) {
                    fs.writeFileSync(path.resolve(dir, file.name), file.content, { encoding: "utf8" });
                }
                return files;
            }), Array.isArray(files) ? files : [files]);
        });
    }
    write() {
        var _a;
        const dir = this.dir;
        if (!fs.existsSync(dir))
            shelljs.mkdir('-p', dir);
        return this.runPipe((files) => __awaiter(this, void 0, void 0, function* () {
            for (let file of files) {
                fs.writeFileSync(path.resolve(dir, file.name), file.content, { encoding: "utf8" });
            }
            return files;
        }), ((_a = this.options) === null || _a === void 0 ? void 0 : _a.files) || []);
    }
    getDir() {
        return this.dir;
    }
    runPipe(func, files) {
        let ctr = Promise.resolve(files);
        for (let fnc of this.funcs)
            ctr = ctr.then(fnc);
        return ctr.then(func);
    }
}
exports.ProjectDirectory = ProjectDirectory;
