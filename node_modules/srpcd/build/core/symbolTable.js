"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SymbolTable = exports.createGlobalIdentifier = exports.randomIntFromInterval = void 0;
const symbolType_1 = require("./symbolType");
let str = '';
function randomIntFromInterval(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
}
exports.randomIntFromInterval = randomIntFromInterval;
function createGlobalIdentifier() {
    var _a;
    str = ((parseInt(str, 36) + 1).toString(36)).replace(/0/g, 'a');
    const _str = str.split('').reverse();
    _str.unshift((_a = _str.shift()) === null || _a === void 0 ? void 0 : _a.toUpperCase());
    return _str.join('') + randomIntFromInterval(1, 999);
}
exports.createGlobalIdentifier = createGlobalIdentifier;
class SymbolTable {
    constructor(metadata, _build) {
        this.metadata = metadata;
        this._build = _build;
        this.prevent_build = false;
        this.children = [];
        this.symbols = new Map();
        this.ids = new Map();
    }
    static createEmptySymbol(metadata) {
        return new SymbolTable(metadata);
    }
    setValue(v) {
        this.value = v;
    }
    setGlobalScope(scope) {
        this.global = scope;
    }
    setParentScope(scope) {
        this.parent = scope;
        // this.global && scope?.setGlobalScope(scope);
        scope === null || scope === void 0 ? void 0 : scope._addChildScope(this);
    }
    _addChildScope(scope) {
        this.children.push(scope);
    }
    insert(identifier, type) {
        this.symbols.set(identifier, type);
        this.ids.set(identifier, createGlobalIdentifier());
    }
    lookup(identifier) {
        return this.symbols.has(identifier);
    }
    getId(identifier) {
        return this.ids.get(identifier);
    }
    getSymbolType(identifier) {
        return this.symbols.get(identifier);
    }
    isDataValidType(identifier) {
        if (!this.lookup(identifier))
            return false;
        return [
            // SymbolType.CLASS,
            symbolType_1.SymbolType.DATA,
            symbolType_1.SymbolType.INT,
            symbolType_1.SymbolType.STRING,
            symbolType_1.SymbolType.BOOLEAN,
        ].includes(this.getSymbolType(identifier));
    }
    build() {
        if (this.prevent_build)
            return;
        this._build && this._build(this, this.parent, this.global);
        for (let scope of this.children) {
            scope.setGlobalScope(this.global);
            scope.build();
        }
        this.prevent_build = true;
        return this;
    }
}
exports.SymbolTable = SymbolTable;
