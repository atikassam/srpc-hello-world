import { SymbolType } from "./symbolType";
export declare function randomIntFromInterval(min: number, max: number): number;
export declare function createGlobalIdentifier(): string;
export declare class SymbolTable {
    readonly metadata: any;
    private _build?;
    static createEmptySymbol(metadata: string): SymbolTable;
    prevent_build: boolean;
    global: SymbolTable;
    parent?: SymbolTable;
    children: SymbolTable[];
    symbols: Map<string, SymbolType>;
    ids: Map<string, string>;
    private value;
    constructor(metadata: any, _build?: ((scope: SymbolTable, parent: SymbolTable | undefined, global: SymbolTable) => void) | undefined);
    setValue(v: any): void;
    setGlobalScope(scope: SymbolTable): void;
    setParentScope(scope?: SymbolTable): void;
    _addChildScope(scope: SymbolTable): void;
    insert(identifier: string, type: string | SymbolType): void;
    lookup(identifier: string): boolean;
    getId(identifier: string): string;
    getSymbolType(identifier: string): SymbolType | undefined;
    isDataValidType(identifier: string): boolean;
    build(): this | undefined;
}
