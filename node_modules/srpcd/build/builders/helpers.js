"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileTS = exports.webpackBuild = exports.__MODULES_DIRS__ = void 0;
const webpack_1 = require("webpack");
const path = require("path");
const util_1 = require("util");
const ts = require("typescript");
// console.log(require.cache)
exports.__MODULES_DIRS__ = new Set([
    path.dirname(path.dirname(require.resolve('protobufjs/package.json'))),
    path.dirname(path.dirname(require.resolve('busboy/package.json'))),
    path.dirname(path.dirname(require.resolve('axios/package.json'))),
    path.dirname(path.dirname(require.resolve('form-data/package.json'))),
    process.cwd()
]);
function webpackBuild({ out_filename, target, entry, libraryTarget, bundle_output_path }) {
    return __awaiter(this, void 0, void 0, function* () {
        const ProgressPlugin = require('webpack/lib/ProgressPlugin');
        const compiler = webpack_1.webpack({
            mode: "production",
            entry: entry,
            target: target || "node",
            output: {
                libraryTarget: libraryTarget || "umd",
                path: path.join(process.cwd(), bundle_output_path),
                filename: out_filename,
                // library: name,
                globalObject: 'this',
            },
            // externals: {
            //   http: 'http',
            //   util: 'util',
            //   stream: 'stream',
            //   fs: 'fs',
            // },
            resolve: {
                modules: Array.from(exports.__MODULES_DIRS__),
                extensions: ['.json', '.js'],
            },
        });
        new ProgressPlugin(function (percentage, msg, current, active, modulepath) {
            if (process.stdout.isTTY && percentage < 1) {
                process.stdout.cursorTo(0);
                modulepath = modulepath ? ' â€¦' + modulepath.substr(modulepath.length - 30) : '';
                current = current ? ' ' + current : '';
                active = active ? ' ' + active : '';
                process.stdout.write((percentage * 100).toFixed(0) + '% ' + msg + current + active + modulepath + ' ');
                process.stdout.clearLine(1);
            }
            else if (percentage === 1) {
                process.stdout.write('\n');
                console.log('webpack: done.');
            }
        }).apply(compiler);
        const stats = yield util_1.promisify(compiler.run.bind(compiler))();
        // console.log(stats)
        process.stdout.write((stats === null || stats === void 0 ? void 0 : stats.toString({
            colors: true,
            modules: false,
            children: false,
            chunks: false,
            chunkModules: false
        })) + '\n\n');
    });
}
exports.webpackBuild = webpackBuild;
function compileTS(fileNames, options) {
    // Create a Program with an in-memory emit
    const createdFiles = ['', ''];
    const host = ts.createCompilerHost(options);
    host.writeFile = (fileName, contents) => {
        if (fileName.split('.').pop() === 'js')
            createdFiles[1] = contents;
        else
            createdFiles[0] = contents;
    };
    // Prepare and emit the d.ts files
    const program = ts.createProgram([fileNames], options, host);
    program.emit();
    return createdFiles;
}
exports.compileTS = compileTS;
