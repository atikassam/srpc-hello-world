"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodejsClientGenerator = void 0;
const core_1 = require("../../core");
const helpers_1 = require("../helpers");
function nodejsClientGenerator({ output, semantic }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { map, proto, proto_json } = yield semantic.generateProto();
        const { client } = yield semantic.generateNodeClient();
        const project_dir = new core_1.ProjectDirectory({
            dir: output
        });
        yield project_dir.writeFiles({ name: 'rpc.client.ts', content: client, language: 'typescript' });
        const js = yield helpers_1.compileTS(`${output}/rpc.client.ts`, {
            allowJs: true,
            declaration: true,
        });
        project_dir.writeFiles([
            // {name: 'def.proto', content: proto, language: 'proto'},
            { name: 'def.map.json', content: map, language: 'json' },
            { name: 'def.proto.json', content: proto_json, language: 'json' },
            { name: 'rpc.client.js', content: js[1], language: 'js' },
            { name: 'rpc.client.bundle.d.ts', content: js[0], language: 'typescript' },
        ]);
        yield helpers_1.webpackBuild({
            entry: `${output}/rpc.client.js`,
            out_filename: `rpc.client.bundle.js`,
            target: 'node',
            libraryTarget: 'umd',
            bundle_output_path: output
        });
        project_dir.removeFiles(['def.map.json', 'def.proto.json', 'rpc.client.js', 'rpc.client.ts']);
    });
}
exports.nodejsClientGenerator = nodejsClientGenerator;
