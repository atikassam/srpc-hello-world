#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander = require("commander");
const lib_1 = require("./lib");
const index_1 = require("./index");
const program = new commander.Command();
program
    .name('SimpleRpc')
    .version('0.0.1')
    .option('-c, --config <path>', 'set config path', './.srpcd.json');
program
    .command('build')
    .description('Build')
    .requiredOption('-e, --entry <dir>', 'Srpcd entry file')
    .option('-b, --server-out-dir <dir>', 'Server output directory', 'srpc.d/server')
    .option('-f, --client-out-dir <dir>', 'Client output directory', 'srpc.d/client')
    .addOption(new commander.Option('-g, --client-platform <platform>', 'Client output language')
    .choices(Object.values(lib_1.ClientPlatforms)).default(lib_1.ClientPlatforms.WEB))
    .addOption(new commander.Option('-h, --server-platform <platform>', 'Server output language')
    .choices(Object.values(lib_1.ServerPlatforms)).default(lib_1.ServerPlatforms.NODEJS))
    .action((e) => __awaiter(void 0, void 0, void 0, function* () {
    yield index_1.generateCode(e);
}));
program.parse(process.argv);
