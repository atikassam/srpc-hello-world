"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_server_bundle_1 = require("./srpcd/rpc.server.bundle");
const DriveFileImpl_1 = require("./impls/DriveFileImpl");
const DriveServiceImpl_1 = require("./impls/DriveServiceImpl");
const AuthServiceImpl_1 = require("./impls/AuthServiceImpl");
const SecureClassImpl_1 = require("./impls/SecureClassImpl");
const classes = {
    'drive.AuthService': AuthServiceImpl_1.AuthServiceImpl,
    'drive.SecureClass': SecureClassImpl_1.SecureClassImpl,
    'drive.DriveFile': DriveFileImpl_1.DriveFileImpl,
    'drive.DriveService': DriveServiceImpl_1.DriveServiceImpl, // typeof drive.DriveService,
};
const errHandler = (e) => __awaiter(void 0, void 0, void 0, function* () {
    console.log(e);
    return ({
        code: 500,
        message: 'Atik ',
        error: [],
    });
});
const drive_service = new rpc_server_bundle_1.drive.DriveServiceSrpc(classes);
drive_service.setErrorHandler(errHandler);
drive_service
    .createServer({ enable_cors: true })
    .listen(9000);
const auth_service = new rpc_server_bundle_1.drive.AuthServiceSrpc(classes);
auth_service.setErrorHandler(errHandler);
auth_service
    .createServer({ enable_cors: true })
    .listen(9001);
// const app = express()
//
// app.use('/drive', drive_service.useExpressHandler)
// app.use('/auth', auth_service.useKoaHandler)
// app.listen(9003)
