"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileImpl = void 0;
const rpc_server_bundle_1 = require("../srpcd/rpc.server.bundle");
const path = require("path");
class FileImpl extends rpc_server_bundle_1.auth.File {
    rename(name) {
        return __awaiter(this, void 0, void 0, function* () {
            // console.log(this.getCtx())
            return false;
        });
    }
    remove() {
        // console.log(this.getCtx())
        return Promise.resolve(false);
    }
    move(source, dest) {
        // console.log(this.getCtx())
        return Promise.resolve(false);
    }
    files() {
        return __awaiter(this, void 0, void 0, function* () {
            // console.log(this.getCtx() || 'kk')
            return new Array(6000)
                .fill(9)
                .map((m, index) => new FileImpl({
                name: 'org ' + index,
                directory: false,
                path: path.resolve(__dirname, __filename)
            }));
        });
    }
}
exports.FileImpl = FileImpl;
