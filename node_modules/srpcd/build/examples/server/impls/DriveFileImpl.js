"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DriveFileImpl = void 0;
const uuid = require("uuid");
const faker = require("faker");
const rpc_server_bundle_1 = require("../srpcd/rpc.server.bundle");
var DriveFile = rpc_server_bundle_1.drive.DriveFile;
class DriveFileImpl extends DriveFile {
    getFilename() {
        return __awaiter(this, void 0, void 0, function* () {
            return 'Demo session';
        });
    }
    rename(name) {
        return Promise.resolve(false);
    }
    path() {
        return Promise.resolve("");
    }
    remove() {
        return Promise.resolve(false);
    }
    move(dest) {
        return Promise.resolve(false);
    }
    files() {
        console.log(this.getCtx().user);
        return Promise.resolve(new Array(faker.random.number(100) + 1).fill(9).map((m, i) => new DriveFileImpl({
            id: uuid.v4(),
            name: faker.name.findName(),
            path: '',
            directory: false,
            size: i,
        })));
    }
}
exports.DriveFileImpl = DriveFileImpl;
