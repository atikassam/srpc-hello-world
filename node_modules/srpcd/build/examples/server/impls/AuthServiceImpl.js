"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthServiceImpl = exports.jwt_secret = void 0;
const jwt = require("jsonwebtoken");
const rpc_server_bundle_1 = require("../srpcd/rpc.server.bundle");
var AuthService = rpc_server_bundle_1.drive.AuthService;
const users = new Map();
exports.jwt_secret = 'my_secret';
class AuthServiceImpl extends AuthService {
    remove() {
        return Promise.resolve(false);
    }
    register(user, password) {
        return __awaiter(this, void 0, void 0, function* () {
            users.set(user.email, Object.assign(Object.assign({}, user), { password }));
            return user;
        });
    }
    verify(username, otp) {
        return Promise.resolve(undefined);
    }
    login(username, password) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!users.has(username))
                throw new Error('User not found');
            return {
                jwt: jwt.sign(users.get(username), exports.jwt_secret)
            };
        });
    }
    forgotPassword(username) {
        return Promise.resolve(false);
    }
    resetPassword(username, password, otp) {
        return Promise.resolve(undefined);
    }
    refreshSession(access) {
        return Promise.resolve(undefined);
    }
    isValidSession(access) {
        return Promise.resolve(false);
    }
}
exports.AuthServiceImpl = AuthServiceImpl;
