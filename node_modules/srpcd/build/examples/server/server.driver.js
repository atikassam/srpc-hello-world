"use strict";
// import * as protobufjs from 'protobufjs'
// import * as http from "http";
// import * as Busboy from "busboy";
// import {RpcClient} from "../client/rpc.client";
// import {ChatSrpcd} from "./srpcd/rpc.server";
//
// export class SimpleProtoServer {
//   constructor(private classes: SrpcdClasses ) {}
//   listen(port: number) {
//     return http.createServer( (req, res) => {
//       res.writeHead(200, {'content-type': 'multipart/form-data'});
//       const meta: any = {}, busboy = new Busboy({headers: req.headers});
//
//       busboy.on('file', function (fieldname, file, filename, encoding, mimetype) {
//         const buf: any[] = [];
//         file.on('data',  (data) => buf.push(data));
//         file.on('end', () => meta[fieldname] = Buffer.concat(buf));
//       });
//
//       busboy.on('field', function (fieldname, val, fieldnameTruncated, valTruncated, encoding, mimetype) {
//         meta[fieldname] = val;
//       });
//       busboy.on('finish', async  () => {
//         const response = await this.callMethod(meta['class'], meta['method'], meta['proto']);
//         res.write(response);
//         res.end();
//       });
//       req.pipe(busboy);
//     }).listen(8080);
//   }
//
//   async callMethod(class_name: any, method_name: any, data: any) {
//     const map = await require('./srpcd/def.map.json');
//     const root = await protobufjs.Root.fromJSON(require('./srpcd/def.proto.json'));
//
//     const RequestType = root.lookupType(map[class_name][method_name]['proto_request_type'])!;
//     const ReturnType = root.lookupType(map[class_name][method_name]['proto_return_type'])!;
//
//     // 1. decode protobuf
//     const decoded_data: any = RequestType.decodeDelimited(data)
//
//     // 2. deserialize class --
//     const {metadata, ...args} = decoded_data;
//
//     // 3. validate data --
//     // 4. func call
//     const _args: any[] = [];
//     const method_arguments = map[class_name][method_name]['arguments'];
//     Object.keys(method_arguments || {}).forEach(arg => {
//       _args[parseInt(method_arguments[arg])] = args[arg];
//     })
//     const response = await (new (this.classes as any)[class_name]())[method_name](..._args)
//
//     // 5. decode protobuf
//     // 1. Verify data
//     const errMsg = ReturnType.verify({ response });
//     if (errMsg)
//       throw Error(errMsg);
//
//     // 2. encode protobuf
//     // Create a new message// or use .fromObject if conversion is necessary
//     const message = ReturnType.create({ response });
//
//     // Encode a message to an Uint8Array (browser) or Buffer (node)
//     return ReturnType.encodeDelimited(message).finish();
//   }
// }
//
// interface SrpcdClasses {
//   Chat: typeof ChatSrpcd
// }
//
// interface CreateConversationArg {
//   userId: string[];
//   name: string;
//   name_song: string;
//   nameSong: string;
// }
//
// export class Chat extends ChatSrpcd {
//   __rpc_client!: RpcClient;
//   private callMethod(name: string, data: any) {
//     return this.__rpc_client.callMethod('Chat', name, data)
//   }
//
//   deleteConversation(id: string): Promise<string> {
//     return Promise.resolve("");
//   }
//
//   setName(name: string): Promise<string[]> {
//     return Promise.resolve([]);
//   }
//
//   public async getConversationById(id: string): Promise<CreateConversationArg[]> {
//     return [
//       { userId: ['getConversationById'], name: id || 'kk', name_song: 'kk', nameSong: 'kk' },
//       { userId: ['getConversationById'], name: id || 'kk', name_song: 'kk', nameSong: 'kk' },
//       { userId: ['getConversationById'], name: id || 'kk', name_song: 'kk', nameSong: 'kk' },
//     ]
//   }
//
//   public getConversations(): Promise<CreateConversationArg> {
//     return this.callMethod('getConversations', arguments);
//   }
//
//   public getConversationCount(): Promise<CreateConversationArg> {
//     return this.callMethod('getConversationCount', arguments);
//   }
//
//   public createConversation(userId: string): Promise<CreateConversationArg> {
//     return this.callMethod('createConversation', arguments);
//   }
// }
//
// new SimpleProtoServer({
//   Chat: Chat
// }).listen(8080)
