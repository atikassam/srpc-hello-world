"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Services = exports.RpcClient = void 0;
const protobufjs = require("protobufjs");
const axios_1 = require("axios");
const FormData = require("form-data");
class RpcClient {
    constructor(url, headers) {
        this.url = url;
    }
    connect() {
        if (!this.services) {
            this.services = new Services(this);
        }
        return this.services;
    }
    callMethod(class_name, method_name, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const map = yield require('./def.map.json');
            console.log(map[class_name]);
            const root = yield protobufjs.Root.fromJSON(require('./def.proto.json'));
            const RequestType = root.lookupType(map[class_name][method_name]['proto_request_type']);
            const ReturnType = root.lookupType(map[class_name][method_name]['proto_return_type']);
            const data = { metadata: { class_name, method_name } };
            const method_arguments = map[class_name][method_name]['arguments'];
            Object.keys(method_arguments || {}).forEach((value, index) => {
                data[value] = args[parseInt(method_arguments[value])];
            });
            // 1. Verify data
            const errMsg = RequestType.verify(data);
            if (errMsg)
                throw Error(errMsg);
            // 2. encode protobuf
            // Create a new message// or use .fromObject if conversion is necessary
            const message = RequestType.create(data);
            // Encode a message to an Uint8Array (browser) or Buffer (node)
            const buffer = RequestType.encodeDelimited(message).finish();
            // console.log(RequestType.decodeDelimited(buffer));
            // 4. func call
            const form = new FormData();
            form.append('proto', buffer, { filename: 'proto' });
            form.append('method', method_name);
            form.append('class', class_name);
            const request = yield axios_1.default.post(this.url, form, {
                responseType: "arraybuffer",
                headers: { 'content-type': `multipart/form-data; boundary=${form.getBoundary()}` }
            });
            const { response } = ReturnType.decodeDelimited(request.data);
            return response;
        });
    }
}
exports.RpcClient = RpcClient;
class Services {
    constructor(___client) {
        this.___client = ___client;
        this.chat = new Chat();
        for (let service in this) {
            if (typeof this[service] === "object" && service !== '___client')
                this[service].__rpc_client = this.___client;
        }
    }
}
exports.Services = Services;
class Chat {
    callMethod(name, data) {
        return this.__rpc_client.callMethod('Chat', name, data);
    }
    getConversationById(id) {
        return this.callMethod('getConversationById', arguments);
    }
    getConversations() {
        return this.callMethod('getConversations', arguments);
    }
    getConversationCount() {
        return this.callMethod('getConversationCount', arguments);
    }
    createConversation(userId) {
        return this.callMethod('createConversation', arguments);
    }
}
const rpc = new RpcClient('http://localhost:8080', {}).connect();
rpc.chat.createConversation('Atikur rahman').then(console.log);
