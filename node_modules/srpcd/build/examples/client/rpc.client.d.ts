declare class RpcServices {
    protected ___client: RpcClient;
    protected ___class_ctors: {};
    constructor(___client: RpcClient);
    _createInstance(class_name: any, state: any): Promise<any>;
}
declare class RpcClient<Service = undefined, ServicesType extends RpcServices = RpcServices> {
    protected url: string;
    protected headers: any;
    protected Services: any;
    protected services: ServicesType;
    private _map?;
    private _root?;
    private get map();
    private get root();
    constructor(url: string, headers: any, Services: any);
    init(): Promise<Service>;
    callMethod(instance: any, class_name: any, method_name: any, args: any): Promise<any>;
    private _decodeResponse;
    private _callMethod;
    private _encodeRequest;
    private _encodeWithType;
    private _getArgumentTypes;
    private _getRequestType;
    private _getReturnType;
    private _getMethodMetadata;
    private _getDataType;
}
export declare class Services extends RpcServices {
    protected ___client: RpcClient;
    constructor(___client: RpcClient);
    'auth.File': auth.File;
    'auth.DriveService': auth.DriveService;
    ___class_ctors: {
        'auth.File': typeof auth.File;
        'auth.DriveService': typeof auth.DriveService;
    };
}
export declare namespace io.srpcd.types {
    interface EmptyClassData {
    }
}
export declare namespace auth {
    interface FileMetadata {
        name: string;
        directory: boolean;
        path: string;
    }
    class File {
        private __rpc_client;
        private callMethod;
        private $___class_state;
        getData(): auth.FileMetadata;
        __updateData(data: Partial<auth.FileMetadata>): void;
        rename(name: string): Promise<boolean>;
        remove(): Promise<boolean>;
        move(source: string, dest: string): Promise<boolean>;
        files(): Promise<auth.File[]>;
    }
    class DriveServiceClient extends RpcClient<DriveService, Services> {
        protected url: string;
        protected headers: any;
        constructor(url: string, headers: any);
        init(): Promise<auth.DriveService>;
    }
    class DriveService {
        private __rpc_client;
        private callMethod;
        private $___class_state;
        getData(): io.srpcd.types.EmptyClassData;
        __updateData(data: Partial<io.srpcd.types.EmptyClassData>): void;
        rootFolder(): Promise<auth.File>;
    }
}
export {};
