import { ActionDict } from "ohm-js";
import { SimpleRPCActions } from "../types/simplerpc.actions.type";
import { SymbolType } from "../core/symbolType";
export interface DatatypeMetadata {
    type: string;
    is_reference: boolean;
    reference?: ClassMetadata | DataMetadata | InterceptorMetadata;
    identifier: string;
    repeated: boolean;
    ctor?: string;
    _create(meta: {
        file: ProgramFileMetadata;
    }): any;
}
export interface ClassMethodArgumentMetadata {
    identifier: string;
    datatype: DatatypeMetadata;
    _create(meta: {
        file: ProgramFileMetadata;
        class: ClassMetadata;
        method: ClassMethodMetadata;
    }): any;
}
export interface ClassMethodMetadata {
    type: SymbolType.FUNCTION;
    identifier: string;
    return: DatatypeMetadata;
    arguments: Map<number, ClassMethodArgumentMetadata>;
    interceptors: Map<string, InterceptorCallMetadata>;
    _create(meta: {
        file: ProgramFileMetadata;
        class: ClassMetadata;
    }): any;
}
export interface ClassDataMetadata {
    type: SymbolType.DATA;
    identifier: string;
    datatype: DatatypeMetadata;
    _create(meta: {
        file: ProgramFileMetadata;
        class: ClassMetadata;
    }): any;
}
export interface ClassMetadata {
    type: SymbolType.CLASS;
    identifier: string;
    properties: Map<string, ClassDataMetadata | ClassMethodMetadata>;
    isService?: boolean;
    interceptors?: Map<string, InterceptorCallMetadata>;
    _create(meta: {
        file: ProgramFileMetadata;
    }): any;
}
export interface DataMetadata {
    type: SymbolType.DATA;
    identifier: string;
    properties: Map<string, DataPropertyMetadata>;
    _create(meta: {
        file: ProgramFileMetadata;
    }): any;
}
export interface DataPropertyMetadata {
    identifier: string;
    datatype: DatatypeMetadata;
    _create(meta: {
        file: ProgramFileMetadata;
        data: DataMetadata;
    }): any;
}
export interface InterceptorMetadata {
    type: SymbolType.INTERCEPTOR;
    identifier: string;
    arguments: Map<number, InterceptorArgumentMetadata>;
    _create(meta: {
        file: ProgramFileMetadata;
    }): any;
}
export interface InterceptorArgumentMetadata {
    identifier: string;
    datatype: DatatypeMetadata;
    _create(meta: {
        file: ProgramFileMetadata;
        interceptor: InterceptorMetadata;
    }): any;
}
export interface InterceptorCallMetadata {
    identifier: string;
    reference: InterceptorMetadata;
    _create(meta: {
        file: ProgramFileMetadata;
    }): any;
}
export interface ProgramFileMetadata {
    version: string;
    package: string;
    declarations: Map<string, DataMetadata | ClassMetadata | InterceptorMetadata>;
    _create(): any;
}
export declare const metadata: SimpleRPCActions & ActionDict;
