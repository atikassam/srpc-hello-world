import { InterceptorDescriptor } from "./InterceptorDescriptor";
import { PackageDescriptor } from "./PackageDescriptor";
import { FunctionDescriptor } from "./FunctionDescriptor";
import { DataDescriptor } from "./DataDescriptor";
import { ClassDescriptor } from "./ClassDescriptor";
import { ImportDescriptor } from "./ImportDescriptor";
import { ProgramDescriptor } from "./ProgramDescriptor";
export declare type GlobalDeclarations = PackageDescriptor | ClassDescriptor | DataDescriptor | InterceptorDescriptor | ImportDescriptor | ProgramDescriptor;
export interface DescriptorCtx<T> {
    program?: ProgramDescriptor;
    file?: ProgramDescriptor | ProgramDescriptor;
    scope?: T;
}
export declare type ScopedNode = ClassDescriptor | DataDescriptor | FunctionDescriptor;
export declare enum ClassModifier {
    SERVICE = "service"
}
export declare enum SymbolType {
    FUNCTION_CALL = "function_call",
    FUNCTION = "function",
    GLOBAL = "block",
    BLOCK = "block",
    PACKAGE = "package",
    FILE = "file",
    INTERCEPTOR = "interceptor",
    VARIABLE = "variable",
    REFERENCE = "reference",
    IMPORT = "import",
    DATA = "data",
    CLASS = "class",
    STRING = "string",
    INT = "int",
    BOOLEAN = "boolean"
}
export declare const DataTypes: never[];
export declare const PropertyTypes: SymbolType[];
export declare const BuiltinTypes: SymbolType[];
export declare const ReturnTypes: SymbolType[];
