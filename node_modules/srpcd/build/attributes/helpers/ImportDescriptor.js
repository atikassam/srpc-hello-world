"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportDescriptor = void 0;
const types_1 = require("./types");
const NodeDescriptor_1 = require("./NodeDescriptor");
class ImportDescriptor extends NodeDescriptor_1.NodeDescriptor {
    constructor() {
        super(...arguments);
        this.type = types_1.SymbolType.IMPORT;
    }
    _run(ctx, task) {
        const _super = Object.create(null, {
            _run: { get: () => super._run }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (task === "resolveDeclarations")
                yield this.resolveDeclarations(ctx);
            yield _super._run.call(this, ctx, task);
        });
    }
    getReference(reference, throw_error = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.import.declarations.has(reference.identifier))
                return this.import.declarations.get(reference.identifier);
            return undefined;
        });
    }
    resolveDeclarations(ctx) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = ctx.scope) === null || _a === void 0 ? void 0 : _a.declare(this));
            (_b = ctx.program) === null || _b === void 0 ? void 0 : _b.dependencies.add(this.import);
        });
    }
}
exports.ImportDescriptor = ImportDescriptor;
