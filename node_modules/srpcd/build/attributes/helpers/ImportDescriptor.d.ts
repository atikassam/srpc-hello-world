import { VariableDescriptor } from "./VariableDescriptor";
import { FunctionDescriptor } from "./FunctionDescriptor";
import { DescriptorCtx, SymbolType } from "./types";
import { NodeDescriptor } from "./NodeDescriptor";
import { ProgramDescriptor } from "./ProgramDescriptor";
export declare class ImportDescriptor extends NodeDescriptor<VariableDescriptor | FunctionDescriptor, ProgramDescriptor> {
    type: SymbolType;
    import: ProgramDescriptor;
    _run(ctx: DescriptorCtx<ProgramDescriptor>, task: "resolveDeclarations" | "typeCheck"): Promise<void>;
    getReference(reference: {
        identifier: string;
    }, throw_error?: boolean): Promise<import("./types").GlobalDeclarations | undefined>;
    resolveDeclarations(ctx: DescriptorCtx<ProgramDescriptor>): Promise<void>;
}
