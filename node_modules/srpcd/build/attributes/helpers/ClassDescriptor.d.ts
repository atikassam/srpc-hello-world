import { VariableDescriptor } from "./VariableDescriptor";
import { FunctionDescriptor } from "./FunctionDescriptor";
import { ClassModifier, DescriptorCtx, SymbolType } from "./types";
import { InterceptorCallDescriptor } from "./InterceptorCallDescriptor";
import { NodeDescriptor } from "./NodeDescriptor";
import { ProgramDescriptor } from "./ProgramDescriptor";
export declare class ClassDescriptor extends NodeDescriptor<VariableDescriptor | FunctionDescriptor, ProgramDescriptor> {
    type: SymbolType;
    modifiers: Set<ClassModifier>;
    interceptors: Map<string, InterceptorCallDescriptor>;
    _run(ctx: DescriptorCtx<ProgramDescriptor>, task: any): Promise<void>;
    toMap(): {
        interceptors: object[];
    };
}
