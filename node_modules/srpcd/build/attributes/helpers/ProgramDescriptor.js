"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgramDescriptor = void 0;
const NodeDescriptor_1 = require("./NodeDescriptor");
const types_1 = require("./types");
const path = require("path");
const generator_1 = require("../../lib/generator");
class ProgramDescriptor extends NodeDescriptor_1.NodeDescriptor {
    constructor() {
        super(...arguments);
        this.type = types_1.SymbolType.FILE;
        this.is_root_file = false;
        this.imports = new Map();
        this.compiledFiles = new Map();
        this.dependencies = new Set();
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const files = [
                path.resolve(__dirname, '../helper_codes/builtins', 'data.srpcd')
            ];
            for (const file of files) {
                yield generator_1.getSemantics(file, this);
            }
        });
    }
    toMap() {
        return Object.assign({}, super.toMap());
    }
    _run(ctx, task) {
        const _super = Object.create(null, {
            _run: { get: () => super._run }
        });
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (task === "resolveDeclarations")
                yield ((_a = ctx.scope) === null || _a === void 0 ? void 0 : _a.declare(this));
            this.children = new Set([...this.children, ...this.imports.values()]);
            yield _super._run.call(this, Object.assign(Object.assign({}, ctx), { program: ctx.program || this, file: this, scope: this }), task);
        });
    }
    getReference(reference, throw_error = true) {
        const _super = Object.create(null, {
            getReference: { get: () => super.getReference }
        });
        return __awaiter(this, void 0, void 0, function* () {
            // console.log('Checking in', this.filename)
            for (const _import of this.imports.values())
                if (yield _import.isDefined(reference))
                    return yield _import.getReference(reference, false);
            return yield _super.getReference.call(this, reference, throw_error);
        });
    }
    /**
     * Create a declaration.
     * @param declaration
     */
    declare(declaration) {
        const _super = Object.create(null, {
            declare: { get: () => super.declare }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield this.package.declare(declaration);
            yield _super.declare.call(this, declaration);
        });
    }
}
exports.ProgramDescriptor = ProgramDescriptor;
