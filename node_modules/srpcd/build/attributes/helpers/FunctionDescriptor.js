"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionDescriptor = void 0;
const types_1 = require("./types");
const NodeDescriptor_1 = require("./NodeDescriptor");
class FunctionDescriptor extends NodeDescriptor_1.NodeDescriptor {
    constructor() {
        super(...arguments);
        this.type = types_1.SymbolType.FUNCTION;
        this.parameters = new Map();
        this.interceptors = new Map();
    }
    _run(ctx, task) {
        const _super = Object.create(null, {
            _run: { get: () => super._run }
        });
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (task === "resolveDeclarations")
                yield ((_a = ctx.scope) === null || _a === void 0 ? void 0 : _a.declare(this));
            this.children = new Set([
                ...this.interceptors.values(), ...this.parameters.values(), ...this.children, this.return_type
            ]);
            yield _super._run.call(this, Object.assign(Object.assign({}, ctx), { scope: this }), task);
        });
    }
    toMap() {
        return Object.assign(Object.assign({}, super.toMap()), { parameters: Array.from(this.parameters.values()).map(value => value.toMap()), interceptors: Array.from(this.interceptors.values()).map(value => value.toMap()), return_type: this.return_type.toMap(), declarations: undefined });
    }
} // Program File metadata
exports.FunctionDescriptor = FunctionDescriptor;
