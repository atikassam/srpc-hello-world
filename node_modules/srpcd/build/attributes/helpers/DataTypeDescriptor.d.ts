import { InterceptorDescriptor } from "./InterceptorDescriptor";
import { DescriptorCtx, SymbolType } from "./types";
import { FunctionDescriptor } from "./FunctionDescriptor";
import { DataDescriptor } from "./DataDescriptor";
import { ClassDescriptor } from "./ClassDescriptor";
import { NodeDescriptor } from "./NodeDescriptor";
export declare class DataTypeDescriptor extends NodeDescriptor<any, ClassDescriptor | FunctionDescriptor | DataDescriptor> {
    type: SymbolType;
    repeated: boolean;
    reference?: ClassDescriptor | DataDescriptor | InterceptorDescriptor;
    allowed_types: Set<SymbolType>;
    _run(ctx: DescriptorCtx<ClassDescriptor | DataDescriptor | FunctionDescriptor>, task: any): Promise<void>;
    toReference(): string;
    toMap(): {
        type: SymbolType;
        repeated: boolean;
        declarations: undefined;
    };
}
