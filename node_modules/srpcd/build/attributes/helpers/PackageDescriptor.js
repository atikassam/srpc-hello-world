"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageDescriptor = void 0;
const types_1 = require("./types");
const helper_1 = require("./helper");
const NodeDescriptor_1 = require("./NodeDescriptor");
class PackageDescriptor extends NodeDescriptor_1.NodeDescriptor {
    constructor(identifier, node) {
        super(identifier, node);
        this.identifier = identifier;
        this.node = node;
        this.type = types_1.SymbolType.PACKAGE;
        PackageDescriptor.packages.set(identifier, this);
    }
    static getPackage(reference) {
        return PackageDescriptor.packages.get(reference.identifier);
    }
    static filter(type) {
        return Array.from(PackageDescriptor.packages.values()).reduce((previousValue, currentValue) => {
            return [...previousValue, ...currentValue.filter(type)];
        }, []);
    }
    _run(ctx, task) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    filter(type) {
        return Array.from(this.declarations.values()).filter(f => (Array.isArray(type) ? type : [type]).includes(f.type));
    }
    declare(declaration) {
        return __awaiter(this, void 0, void 0, function* () {
            if (![types_1.SymbolType.DATA, types_1.SymbolType.CLASS, types_1.SymbolType.INTERCEPTOR].includes(declaration.type))
                return;
            if (yield this.isDefined({ identifier: declaration.identifier }))
                helper_1.throwError(declaration.node, `${declaration.type} ${declaration.identifier}  ` +
                    // `${(await this.getReference({ identifier: declaration.identifier }, false))?.type} ` +
                    `already declared in ${this.identifier} ${this.type}`, declaration.file);
            this.declarations.set(declaration.identifier, declaration);
        });
    }
}
exports.PackageDescriptor = PackageDescriptor;
PackageDescriptor.packages = new Map();
