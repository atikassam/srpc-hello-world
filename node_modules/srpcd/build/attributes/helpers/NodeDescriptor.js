"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeDescriptor = void 0;
const helper_1 = require("./helper");
class NodeDescriptor {
    constructor(identifier, node) {
        this.identifier = identifier;
        this.node = node;
        this.declared = false;
        this.declarations = new Map();
        this.children = new Set();
    }
    toMap() {
        return {
            identifier: this.identifier,
            type: this.type,
            declarations: Array.from(this.declarations.values()).map(value => value.toMap()),
        };
    }
    _run(ctx, task) {
        return __awaiter(this, void 0, void 0, function* () {
            this.program = ctx.program;
            this.file = ctx.file;
            this.scope = ctx.scope;
            for (let children of this.children.values()) {
                yield children._run(Object.assign({}, ctx), task);
            }
        });
    }
    isDefined(reference) {
        return __awaiter(this, void 0, void 0, function* () {
            return !!(yield this.getReference(reference, false));
        });
    }
    getReference(reference, throw_error = true) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            let declaration = this.declarations.get(reference.identifier);
            if (!declaration && this.file !== this)
                declaration = yield ((_a = this.file) === null || _a === void 0 ? void 0 : _a.getReference(reference, false));
            if (!declaration && this.program !== this)
                declaration = yield ((_b = this.program) === null || _b === void 0 ? void 0 : _b.getReference(reference, false));
            if (!declaration && throw_error)
                helper_1.throwError(this.node, `${reference.identifier} is not defined in ${this.type}`, this.file);
            return declaration;
        });
    }
    /**
     * Create a declaration.
     * @param declaration
     */
    declare(declaration) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (declaration.declared)
                return console.warn('Warning already declared');
            if (yield this.isDefined({ identifier: declaration.identifier }))
                helper_1.throwError(declaration.node, `${declaration.identifier} ${declaration.type}, ` +
                    `${(_a = (yield this.getReference({ identifier: declaration.identifier }, false))) === null || _a === void 0 ? void 0 : _a.type} ` +
                    `already declared in ${this.identifier} ${this.type}`, this.file);
            this.declarations.set(declaration.identifier, declaration);
            declaration.declared = true;
        });
    }
    toReference() {
        var _a;
        return [(_a = this === null || this === void 0 ? void 0 : this.file) === null || _a === void 0 ? void 0 : _a.package.identifier, this.identifier].join('.');
    }
}
exports.NodeDescriptor = NodeDescriptor;
