"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTypeDescriptor = void 0;
const types_1 = require("./types");
const helper_1 = require("./helper");
const NodeDescriptor_1 = require("./NodeDescriptor");
class DataTypeDescriptor extends NodeDescriptor_1.NodeDescriptor {
    constructor() {
        super(...arguments);
        this.repeated = false;
        this.allowed_types = new Set();
    }
    _run(ctx, task) {
        const _super = Object.create(null, {
            _run: { get: () => super._run }
        });
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (task === "typeCheck") {
                let type = this.type;
                if (this.type === types_1.SymbolType.REFERENCE) {
                    type = undefined;
                    if (yield ((_a = ctx.scope) === null || _a === void 0 ? void 0 : _a.isDefined({ identifier: this.identifier }))) {
                        this.reference = yield ((_b = ctx.scope) === null || _b === void 0 ? void 0 : _b.getReference({ identifier: this.identifier }));
                        type = (_c = this.reference) === null || _c === void 0 ? void 0 : _c.type;
                    }
                    else {
                        helper_1.throwError(this.node, `Reference type ${this.identifier} doesn't exist"`, this.file);
                    }
                }
                if (!type || !this.allowed_types.has(type))
                    helper_1.throwError(this.node, `Invalid type ${type}, Supported types can be "${Array.from(this.allowed_types).join(', ')}"`, this.file);
            }
            // console.log(this.type, this.identifier)
            yield _super._run.call(this, ctx, task);
        });
    }
    toReference() {
        var _a, _b;
        if (this.type !== types_1.SymbolType.REFERENCE)
            helper_1.throwError(this.node, `Is not a referance`, this.file);
        return [(_b = (_a = this.reference) === null || _a === void 0 ? void 0 : _a.file) === null || _b === void 0 ? void 0 : _b.package.identifier, this.identifier].join('.');
    }
    toMap() {
        return Object.assign(Object.assign({}, super.toMap()), { type: this.type, repeated: this.repeated, declarations: undefined });
    }
}
exports.DataTypeDescriptor = DataTypeDescriptor;
