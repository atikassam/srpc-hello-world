import { NodeDescriptor } from "./NodeDescriptor";
import { DescriptorCtx, GlobalDeclarations, SymbolType } from "./types";
import { PackageDescriptor } from "./PackageDescriptor";
import { ImportDescriptor } from "./ImportDescriptor";
export declare class ProgramDescriptor extends NodeDescriptor<GlobalDeclarations, ProgramDescriptor> {
    type: SymbolType;
    filename: string;
    is_root_file: boolean;
    semantics: () => any;
    package: PackageDescriptor;
    version: string;
    imports: Map<string, ImportDescriptor>;
    compiledFiles: Map<string, ProgramDescriptor | undefined>;
    dependencies: Set<ProgramDescriptor>;
    init(): Promise<void>;
    toMap(): {};
    _run(ctx: DescriptorCtx<ProgramDescriptor>, task: any): Promise<void>;
    getReference(reference: {
        identifier: string;
    }, throw_error?: boolean): any;
    /**
     * Create a declaration.
     * @param declaration
     */
    declare(declaration: GlobalDeclarations): Promise<void>;
}
