"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importDeclaration = exports.throwError = void 0;
const path = require("path");
const generator_1 = require("../../lib/generator");
const ImportDescriptor_1 = require("./ImportDescriptor");
function throwError(node, message, file) {
    var _a;
    throw new Error(`${file === null || file === void 0 ? void 0 : file.identifier} ` + '\n' +
        message + '\n' +
        ((_a = node === null || node === void 0 ? void 0 : node.source) === null || _a === void 0 ? void 0 : _a.getLineAndColumnMessage()) || '');
}
exports.throwError = throwError;
function importDeclaration(import_in_file, import_path, node, program) {
    return __awaiter(this, void 0, void 0, function* () {
        const { dir, base, ext, } = path.parse(import_in_file);
        const absolute_import_file_path = path.isAbsolute(import_path) ? import_path : path.resolve(dir, eval(import_path));
        const _import = new ImportDescriptor_1.ImportDescriptor(`import://${import_in_file}:${absolute_import_file_path}`, node);
        if (!program.compiledFiles.has(absolute_import_file_path)) {
            _import.import = yield generator_1.getSemantics(absolute_import_file_path, program).descriptor;
        }
        else
            _import.import = program.compiledFiles.get(absolute_import_file_path);
        return _import;
    });
}
exports.importDeclaration = importDeclaration;
