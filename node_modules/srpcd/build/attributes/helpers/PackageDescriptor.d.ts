import { DescriptorCtx, GlobalDeclarations, SymbolType } from "./types";
import * as ohm from "ohm-js";
import { NodeDescriptor } from "./NodeDescriptor";
import { ProgramDescriptor } from "./ProgramDescriptor";
export declare class PackageDescriptor extends NodeDescriptor<GlobalDeclarations, ProgramDescriptor> {
    identifier: string;
    node: ohm.Node | any;
    static packages: Map<string, PackageDescriptor>;
    static getPackage(reference: {
        identifier: string;
    }): PackageDescriptor | undefined;
    static filter(type: SymbolType | SymbolType[]): GlobalDeclarations[];
    type: SymbolType;
    constructor(identifier: string, node: ohm.Node | any);
    _run(ctx: DescriptorCtx<ProgramDescriptor>, task: "resolveDeclarations" | "typeCheck"): Promise<void>;
    filter(type: SymbolType | SymbolType[]): GlobalDeclarations[];
    declare(declaration: GlobalDeclarations): Promise<void>;
}
