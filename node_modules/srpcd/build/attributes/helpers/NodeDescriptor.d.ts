import * as ohm from "ohm-js";
import { DescriptorCtx, SymbolType } from "./types";
import { ProgramDescriptor } from "./ProgramDescriptor";
export declare abstract class NodeDescriptor<DeclarationType extends NodeDescriptor<any, any>, ParentScope> {
    identifier: string;
    node: ohm.Node | any;
    program?: ProgramDescriptor;
    file?: ProgramDescriptor;
    scope?: ParentScope;
    declared: boolean;
    abstract type: SymbolType;
    declarations: Map<string, DeclarationType>;
    children: Set<NodeDescriptor<any, any>>;
    constructor(identifier: string, node: ohm.Node | any);
    toMap(): object;
    _run(ctx: DescriptorCtx<any>, task: 'resolveDeclarations' | 'typeCheck'): Promise<void>;
    isDefined(reference: {
        identifier: string;
    }): Promise<boolean>;
    getReference(reference: {
        identifier: string;
    }, throw_error?: boolean): any;
    /**
     * Create a declaration.
     * @param declaration
     */
    declare(declaration: DeclarationType): Promise<void>;
    toReference(): string;
}
