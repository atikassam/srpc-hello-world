import { VariableDescriptor } from "./VariableDescriptor";
import { DataTypeDescriptor } from "./DataTypeDescriptor";
import { DescriptorCtx, SymbolType } from "./types";
import { ClassDescriptor } from "./ClassDescriptor";
import { InterceptorCallDescriptor } from "./InterceptorCallDescriptor";
import { NodeDescriptor } from "./NodeDescriptor";
export declare class FunctionDescriptor extends NodeDescriptor<VariableDescriptor, ClassDescriptor> {
    type: SymbolType;
    return_type: DataTypeDescriptor;
    parameters: Map<number, VariableDescriptor>;
    interceptors: Map<string, InterceptorCallDescriptor>;
    _run(ctx: DescriptorCtx<ClassDescriptor>, task: any): Promise<void>;
    toMap(): {
        parameters: {
            datatype: {
                type: SymbolType;
                repeated: boolean;
                declarations: undefined;
            };
            declarations: undefined;
        }[];
        interceptors: object[];
        return_type: {
            type: SymbolType;
            repeated: boolean;
            declarations: undefined;
        };
        declarations: undefined;
    };
}
