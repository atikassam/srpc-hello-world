"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCode = void 0;
const path = require("path");
const generator_1 = require("./lib/generator");
const lib_1 = require("./lib");
const nodejs_server_1 = require("./builders/nodejs/nodejs.server");
const web_client_1 = require("./builders/web/web.client");
const TestBuildProps = {
    entry: path.resolve(__dirname, 'examples/srpc.d/sample.srpcd'),
    serverOutDir: '_temp/server',
    clientOutDir: '_temp/client',
    clientPlatform: lib_1.ClientPlatforms.WEB,
    serverPlatform: lib_1.ServerPlatforms.NODEJS
};
function generateCode({ serverOutDir, clientOutDir, clientPlatform, serverPlatform, entry } = TestBuildProps) {
    return __awaiter(this, void 0, void 0, function* () {
        const program_semantic = yield generator_1.getSemantics(path.resolve(__dirname, 'helper_codes/builtins', 'data.srpcd'));
        const program = yield program_semantic.descriptor;
        const semantic = yield generator_1.getSemantics(entry, program, true);
        yield semantic.descriptor;
        yield program._run({ program }, "resolveDeclarations");
        yield program._run({ program }, "typeCheck");
        switch (clientPlatform) {
            case lib_1.ClientPlatforms.WEB:
                yield web_client_1.webClientGenerator({ target: 'web', output: clientOutDir, semantic });
                break;
            case lib_1.ClientPlatforms.NODEJS:
                yield web_client_1.webClientGenerator({ target: 'node', output: clientOutDir, semantic });
                break;
        }
        switch (serverPlatform) {
            case lib_1.ServerPlatforms.NODEJS:
                yield nodejs_server_1.nodejsServerGenerator({ output: serverOutDir, semantic });
                break;
        }
    });
}
exports.generateCode = generateCode;
