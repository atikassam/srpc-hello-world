"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.Chat = exports.Message = exports.Conversation1 = exports.Conversation = exports.Services = void 0;
var protobufjs = require("protobufjs/light");
var axios_1 = require("axios");
var buffer_1 = require("buffer");
var RpcServices = /** @class */ (function () {
    function RpcServices(___client) {
        this.___client = ___client;
        this.___class_ctors = {};
    }
    RpcServices.prototype._createInstance = function (class_name, state) {
        return __awaiter(this, void 0, void 0, function () {
            var _services, ClassName, instance;
            return __generator(this, function (_a) {
                _services = this;
                ClassName = _services.___class_ctors[class_name];
                instance = new ClassName(state);
                instance.__rpc_client = this.___client;
                instance.__updateData && instance.__updateData(state);
                return [2 /*return*/, instance];
            });
        });
    };
    return RpcServices;
}());
var RpcClient = /** @class */ (function () {
    function RpcClient(url, headers, Services) {
        this.url = url;
        this.headers = headers;
        this.Services = Services;
    }
    Object.defineProperty(RpcClient.prototype, "map", {
        get: function () {
            if (!this._map)
                throw Error('Please initiate the app first');
            return this._map;
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(RpcClient.prototype, "root", {
        get: function () {
            if (!this._root)
                throw Error('Please initiate the app first');
            return this._root;
        },
        enumerable: false,
        configurable: true
    });
    ;
    RpcClient.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, require('./def.map.json')];
                    case 1:
                        _a._map = _c.sent();
                        _b = this;
                        return [4 /*yield*/, protobufjs.Root.fromJSON(require('./def.proto.json'))];
                    case 2:
                        _b._root = _c.sent();
                        if (!this.services)
                            this.services = new this.Services(this);
                        return [2 /*return*/, undefined];
                }
            });
        });
    };
    RpcClient.prototype.callMethod = function (instance, class_name, method_name, args) {
        return __awaiter(this, void 0, void 0, function () {
            var encoded, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._encodeRequest(instance, class_name, method_name, args)];
                    case 1:
                        encoded = _a.sent();
                        return [4 /*yield*/, this._callMethod(instance, class_name, method_name, encoded.data, encoded.args)];
                    case 2:
                        response = _a.sent();
                        return [2 /*return*/, this._decodeResponse(instance, class_name, method_name, response)];
                }
            });
        });
    };
    RpcClient.prototype._decodeResponse = function (instance, class_name, method_name, _response) {
        return __awaiter(this, void 0, void 0, function () {
            var ReturnType, _a, isReturnTypeClass, return_type, _b, data, response;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this._getReturnType(class_name, method_name)];
                    case 1:
                        ReturnType = _c.sent();
                        return [4 /*yield*/, this._getMethodMetadata(class_name, method_name)];
                    case 2:
                        _a = _c.sent(), isReturnTypeClass = _a.isReturnTypeClass, return_type = _a.return_type;
                        _b = (this.decode(ReturnType, _response) || {}), data = _b.data, response = _b.response;
                        console.log(data, response);
                        instance.__updateData && instance.__updateData(data);
                        if (isReturnTypeClass()) {
                            return [2 /*return*/, Array.isArray(response)
                                    ? Promise.all(response.map(function (state) { return _this.services._createInstance(return_type.ctor, state); }))
                                    : this.services._createInstance(return_type.ctor, response)];
                        }
                        return [2 /*return*/, response];
                }
            });
        });
    };
    RpcClient.prototype.decode = function (type, data) {
        if (!data)
            return;
        return type.toObject(type.decode(data), {
            enums: String,
            longs: Number,
            bytes: String,
            defaults: true,
            arrays: true,
            objects: true,
            oneofs: true // includes virtual oneof fields set to the present field's name
        });
    };
    RpcClient.prototype._callMethod = function (instance, class_name, method_name, data, args) {
        return __awaiter(this, void 0, void 0, function () {
            var form, request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        form = new FormData();
                        form.append('args', new Blob([args], { type: 'arraybuffer' }), 'args');
                        form.append('data', new Blob([data], { type: 'arraybuffer' }), 'data');
                        form.append('method', method_name);
                        form.append('class', class_name);
                        return [4 /*yield*/, axios_1["default"].post(this.url, form, {
                                responseType: "arraybuffer"
                            })];
                    case 1:
                        request = _a.sent();
                        return [2 /*return*/, buffer_1.Buffer.from(request.data)];
                }
            });
        });
    };
    RpcClient.prototype._encodeRequest = function (instance, class_name, method_name, args) {
        return __awaiter(this, void 0, void 0, function () {
            var RequestType, ClassDataType, method_args, method_arguments, encoded, class_state, _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this._getRequestType(class_name, method_name)];
                    case 1:
                        RequestType = _d.sent();
                        return [4 /*yield*/, this._getDataType(class_name)];
                    case 2:
                        ClassDataType = _d.sent();
                        method_args = {};
                        return [4 /*yield*/, this._getArgumentTypes(class_name, method_name)];
                    case 3:
                        method_arguments = _d.sent();
                        (method_arguments || []).forEach(function (_a) {
                            var index = _a.index, identifier = _a.identifier;
                            method_args[identifier] = args[index];
                        });
                        _c = {};
                        return [4 /*yield*/, this._encodeWithType(RequestType, method_args)];
                    case 4:
                        encoded = (_c.args = _d.sent(),
                            _c.data = undefined,
                            _c);
                        class_state = instance.getData && instance.getData();
                        if (!(ClassDataType && class_state)) return [3 /*break*/, 6];
                        _a = encoded;
                        _b = 'data';
                        return [4 /*yield*/, this._encodeWithType(ClassDataType, class_state)];
                    case 5:
                        _a[_b] = _d.sent();
                        _d.label = 6;
                    case 6: return [2 /*return*/, encoded];
                }
            });
        });
    };
    RpcClient.prototype._encodeWithType = function (type, data) {
        return __awaiter(this, void 0, void 0, function () {
            var errMsg, message;
            return __generator(this, function (_a) {
                if (!data)
                    return [2 /*return*/];
                errMsg = type.verify(data);
                if (errMsg)
                    throw Error(errMsg);
                message = type.create(data);
                // Encode a message to an Uint8Array (browser) or Buffer (node)
                return [2 /*return*/, type.encode(message).finish()];
            });
        });
    };
    RpcClient.prototype._getArgumentTypes = function (class_name, method_name) {
        return __awaiter(this, void 0, void 0, function () {
            var request_type;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getMethodMetadata(class_name, method_name)];
                    case 1:
                        request_type = (_a.sent()).request_type;
                        return [2 /*return*/, request_type.args];
                }
            });
        });
    };
    RpcClient.prototype._getRequestType = function (class_name, method_name) {
        return __awaiter(this, void 0, void 0, function () {
            var request_type, type;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getMethodMetadata(class_name, method_name)];
                    case 1:
                        request_type = (_a.sent()).request_type;
                        type = this.root.lookupType(request_type.proto);
                        if (!type)
                            throw Error('Method not found');
                        return [2 /*return*/, type];
                }
            });
        });
    };
    RpcClient.prototype._getReturnType = function (class_name, method_name) {
        return __awaiter(this, void 0, void 0, function () {
            var return_type, type;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getMethodMetadata(class_name, method_name)];
                    case 1:
                        return_type = (_a.sent()).return_type;
                        type = this.root.lookupType(return_type.proto);
                        if (!type)
                            throw Error('Return type not found');
                        return [2 /*return*/, type];
                }
            });
        });
    };
    RpcClient.prototype._getMethodMetadata = function (class_name, method_name) {
        return __awaiter(this, void 0, void 0, function () {
            var metadata, return_type, request_type;
            return __generator(this, function (_a) {
                metadata = this.map[class_name]['methods'][method_name];
                return_type = metadata['return_type'];
                request_type = metadata['request_type'];
                return [2 /*return*/, {
                        metadata: metadata,
                        request_type: request_type,
                        return_type: return_type,
                        return_proto_type: return_type.proto,
                        return_constructor_type: return_type.ctor,
                        isReturnTypeClass: function () {
                            return return_type.datatype === 'class';
                        }
                    }];
            });
        });
    };
    RpcClient.prototype._getDataType = function (class_name) {
        return __awaiter(this, void 0, void 0, function () {
            var DataType;
            return __generator(this, function (_a) {
                DataType = this.map[class_name]['proto_class_data_type'];
                if (!DataType)
                    return [2 /*return*/];
                return [2 /*return*/, this.root.lookupType(DataType)];
            });
        });
    };
    return RpcClient;
}());
var Services = /** @class */ (function (_super) {
    __extends(Services, _super);
    function Services(___client) {
        var _this = _super.call(this, ___client) || this;
        _this.___client = ___client;
        _this.conversation = new Conversation();
        _this.conversation1 = new Conversation1();
        _this.message = new Message();
        _this.chat = new Chat();
        _this.___class_ctors = {
            Conversation: Conversation,
            Conversation1: Conversation1,
            Message: Message,
            Chat: Chat
        };
        for (var service in _this) {
            if (typeof _this[service] === "object" && service !== '___client')
                _this[service].__rpc_client = _this.___client;
        }
        return _this;
    }
    return Services;
}(RpcServices));
exports.Services = Services;
var Conversation = /** @class */ (function () {
    function Conversation() {
    }
    Conversation.prototype.callMethod = function (name, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.__rpc_client.callMethod(this, 'Conversation', name, data)];
            });
        });
    };
    Conversation.prototype.getData = function () { return this.$___class_state || {}; };
    Conversation.prototype.__updateData = function (data) { this.$___class_state = Object.assign(this.$___class_state || {}, data || {}); };
    Conversation.prototype.getMessages = function () {
        return this.callMethod('getMessages', arguments);
    };
    Conversation.prototype.getMessageCount = function () {
        return this.callMethod('getMessageCount', arguments);
    };
    Conversation.prototype.sendMessage = function () {
        return this.callMethod('sendMessage', arguments);
    };
    return Conversation;
}());
exports.Conversation = Conversation;
var Conversation1 = /** @class */ (function () {
    function Conversation1() {
    }
    Conversation1.prototype.callMethod = function (name, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.__rpc_client.callMethod(this, 'Conversation1', name, data)];
            });
        });
    };
    Conversation1.prototype.getData = function () { return this.$___class_state || {}; };
    Conversation1.prototype.__updateData = function (data) { this.$___class_state = Object.assign(this.$___class_state || {}, data || {}); };
    Conversation1.prototype.getMessages = function () {
        return this.callMethod('getMessages', arguments);
    };
    Conversation1.prototype.getMessageCount = function () {
        return this.callMethod('getMessageCount', arguments);
    };
    Conversation1.prototype.sendMessage = function () {
        return this.callMethod('sendMessage', arguments);
    };
    return Conversation1;
}());
exports.Conversation1 = Conversation1;
var Message = /** @class */ (function () {
    function Message() {
    }
    Message.prototype.callMethod = function (name, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.__rpc_client.callMethod(this, 'Message', name, data)];
            });
        });
    };
    Message.prototype.getData = function () { return this.$___class_state || {}; };
    Message.prototype.__updateData = function (data) { this.$___class_state = Object.assign(this.$___class_state || {}, data || {}); };
    Message.prototype.getMessages = function (k, name) {
        return this.callMethod('getMessages', arguments);
    };
    Message.prototype.getMessageCount = function () {
        return this.callMethod('getMessageCount', arguments);
    };
    Message.prototype.sendMessage = function () {
        return this.callMethod('sendMessage', arguments);
    };
    return Message;
}());
exports.Message = Message;
var Chat = /** @class */ (function () {
    function Chat() {
    }
    Chat.prototype.callMethod = function (name, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.__rpc_client.callMethod(this, 'Chat', name, data)];
            });
        });
    };
    Chat.prototype.getData = function () { return this.$___class_state || {}; };
    Chat.prototype.__updateData = function (data) { this.$___class_state = Object.assign(this.$___class_state || {}, data || {}); };
    Chat.prototype.deleteConversation = function (id) {
        return this.callMethod('deleteConversation', arguments);
    };
    Chat.prototype.setName = function (name) {
        return this.callMethod('setName', arguments);
    };
    Chat.prototype.getConversationById = function (id) {
        return this.callMethod('getConversationById', arguments);
    };
    Chat.prototype.getConversations = function () {
        return this.callMethod('getConversations', arguments);
    };
    Chat.prototype.getConversationCount = function () {
        return this.callMethod('getConversationCount', arguments);
    };
    Chat.prototype.createConversation = function (userId) {
        return this.callMethod('createConversation', arguments);
    };
    return Chat;
}());
exports.Chat = Chat;
