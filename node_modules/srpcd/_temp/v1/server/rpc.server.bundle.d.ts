/// <reference types="node" />
import * as http from "http";
import { IncomingMessage, ServerResponse } from "http";
export interface SrpcServerOptions {
    enable_cors: boolean;
}
declare class SrpcServer<SrpcClasses> {
    private implementations;
    private options?;
    private _map?;
    private _root?;
    private get map();
    private get root();
    private server;
    constructor(implementations: SrpcClasses);
    init(options: SrpcServerOptions): Promise<void>;
    listen(port: number): http.Server;
    withExpress(req: IncomingMessage, res: ServerResponse): void;
    private requestHandler;
    private enableCors;
    protected callMethod(class_name: any, method_name: any, data: any, args: any): Promise<Uint8Array>;
    private _decodeRequest;
    private _callMethod;
    private _encodeResponse;
    private _getArgumentTypes;
    private _getRequestType;
    private _getReturnType;
    private _getMethodMetadata;
    private _getDataType;
}
export interface FileMetadata {
}
export declare abstract class File {
    private $___class_state;
    constructor(data: FileMetadata);
    getData(): FileMetadata;
    updateData(data: Partial<FileMetadata>): void;
}
export declare abstract class File2 {
}
export declare abstract class FileList {
    private $___class_state;
    constructor(data: FileMetadata);
    getData(): FileMetadata;
    updateData(data: Partial<FileMetadata>): void;
    abstract getFile(id: string): Promise<File>;
    abstract getFiles(): Promise<FileMetadata[]>;
}
interface SrpcClasses {
    File?: typeof File;
    File2?: typeof File2;
    FileList?: typeof FileList;
}
export declare class SimpleRpcServer extends SrpcServer<SrpcClasses> {
    constructor(classes: SrpcClasses);
}
export {};
