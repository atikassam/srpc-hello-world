"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.SimpleRpcServer = exports.FileList = exports.File2 = exports.File = void 0;
var protobufjs = require("protobufjs");
var http = require("http");
var Busboy = require("busboy");
var SrpcServer = /** @class */ (function () {
    function SrpcServer(implementations) {
        this.implementations = implementations;
    }
    Object.defineProperty(SrpcServer.prototype, "map", {
        get: function () {
            if (!this._map)
                throw Error('Please initiate the app first');
            return this._map;
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(SrpcServer.prototype, "root", {
        get: function () {
            if (!this._root)
                throw Error('Please initiate the app first');
            return this._root;
        },
        enumerable: false,
        configurable: true
    });
    ;
    SrpcServer.prototype.init = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.options = options;
                        _a = this;
                        return [4 /*yield*/, require('./def.map.json')];
                    case 1:
                        _a._map = _c.sent();
                        _b = this;
                        return [4 /*yield*/, protobufjs.Root.fromJSON(require('./def.proto.json'))];
                    case 2:
                        _b._root = _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SrpcServer.prototype.listen = function (port) {
        var _this = this;
        return http.createServer(function (req, res) {
            var _a;
            if ((_a = _this.options) === null || _a === void 0 ? void 0 : _a.enable_cors)
                _this.enableCors(req, res);
            _this.requestHandler(req, res);
        }).listen(port);
    };
    SrpcServer.prototype.withExpress = function (req, res) {
        return this.requestHandler(req, res);
    };
    SrpcServer.prototype.requestHandler = function (req, res) {
        var _this = this;
        var meta = {}, busboy = new Busboy({ headers: req.headers });
        busboy.on('file', function (fieldname, file, filename, encoding, mimetype) {
            var buf = [];
            file.on('data', function (data) { return buf.push(data); });
            file.on('end', function () { return meta[fieldname] = Buffer.concat(buf); });
        });
        busboy.on('field', function (fieldname, val, fieldnameTruncated, valTruncated, encoding, mimetype) {
            meta[fieldname] = val;
        });
        busboy.on('finish', function () { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.callMethod(meta['class'], meta['method'], meta['data'], meta['args'])];
                    case 1:
                        response = _a.sent();
                        res.write(response);
                        res.end();
                        return [2 /*return*/];
                }
            });
        }); });
        req.pipe(busboy);
    };
    SrpcServer.prototype.enableCors = function (req, res) {
        // Website you wish to allow to connect
        res.setHeader('Access-Control-Allow-Origin', '*');
        // Request methods you wish to allow
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
        // Request headers you wish to allow
        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');
        // Set to true if you need the website to include cookies in the requests sent
        // to the API (e.g. in case you use sessions)
        res.setHeader('Access-Control-Allow-Credentials', 'true');
    };
    SrpcServer.prototype.callMethod = function (class_name, method_name, data, args) {
        return __awaiter(this, void 0, void 0, function () {
            var decoded, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._decodeRequest(class_name, method_name, data, args)];
                    case 1:
                        decoded = _a.sent();
                        return [4 /*yield*/, this._callMethod(class_name, method_name, decoded)];
                    case 2:
                        response = (_a.sent()).response;
                        return [2 /*return*/, this._encodeResponse(class_name, method_name, response)];
                }
            });
        });
    };
    SrpcServer.prototype._decodeRequest = function (class_name, method_name, data, args) {
        return __awaiter(this, void 0, void 0, function () {
            var ClassDataType, RequestType, decoded_args, decoded_data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getDataType(class_name)];
                    case 1:
                        ClassDataType = _a.sent();
                        return [4 /*yield*/, this._getRequestType(class_name, method_name)];
                    case 2:
                        RequestType = _a.sent();
                        decoded_args = RequestType.decode(args);
                        decoded_data = ClassDataType.decode(data);
                        return [2 /*return*/, { args: decoded_args, data: decoded_data }];
                }
            });
        });
    };
    SrpcServer.prototype._callMethod = function (class_name, method_name, _a) {
        var args = _a.args, data = _a.data;
        return __awaiter(this, void 0, void 0, function () {
            var _args, method_arguments, ClassCtor, instance;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _args = [];
                        method_arguments = this.map[class_name][method_name]['arguments'];
                        Object.keys(method_arguments || {})
                            .forEach(function (arg) { return _args[parseInt(method_arguments[arg])] = args[arg]; });
                        ClassCtor = this.implementations[class_name];
                        instance = new ClassCtor(data);
                        _b = {};
                        return [4 /*yield*/, instance[method_name].apply(instance, _args)];
                    case 1: return [2 /*return*/, (_b.response = _c.sent(),
                            _b)];
                }
            });
        });
    };
    SrpcServer.prototype._encodeResponse = function (class_name, method_name, _response) {
        return __awaiter(this, void 0, void 0, function () {
            var ReturnType, isReturnTypeClass, response, errMsg, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getReturnType(class_name, method_name)];
                    case 1:
                        ReturnType = _a.sent();
                        return [4 /*yield*/, this._getMethodMetadata(class_name, method_name)];
                    case 2:
                        isReturnTypeClass = (_a.sent()).isReturnTypeClass;
                        response = isReturnTypeClass() ? _response.getData() : _response;
                        errMsg = ReturnType.verify({ response: response });
                        if (errMsg)
                            throw Error(errMsg);
                        message = ReturnType.create({ response: response });
                        // Encode a message to an Uint8Array (browser) or Buffer (node)
                        return [2 /*return*/, ReturnType.encode(message).finish()];
                }
            });
        });
    };
    SrpcServer.prototype._getArgumentTypes = function (class_name, method_name) {
        return __awaiter(this, void 0, void 0, function () {
            var request_type;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getMethodMetadata(class_name, method_name)];
                    case 1:
                        request_type = (_a.sent()).request_type;
                        return [2 /*return*/, request_type.args];
                }
            });
        });
    };
    SrpcServer.prototype._getRequestType = function (class_name, method_name) {
        return __awaiter(this, void 0, void 0, function () {
            var request_type, type;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getMethodMetadata(class_name, method_name)];
                    case 1:
                        request_type = (_a.sent()).request_type;
                        type = this.root.lookupType(request_type.proto);
                        if (!type)
                            throw Error('Method not found');
                        return [2 /*return*/, type];
                }
            });
        });
    };
    SrpcServer.prototype._getReturnType = function (class_name, method_name) {
        return __awaiter(this, void 0, void 0, function () {
            var return_type, type;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getMethodMetadata(class_name, method_name)];
                    case 1:
                        return_type = (_a.sent()).return_type;
                        type = this.root.lookupType(return_type.proto);
                        if (!type)
                            throw Error('Return type not found');
                        return [2 /*return*/, type];
                }
            });
        });
    };
    SrpcServer.prototype._getMethodMetadata = function (class_name, method_name) {
        return __awaiter(this, void 0, void 0, function () {
            var metadata, return_type, request_type;
            return __generator(this, function (_a) {
                metadata = this.map[class_name]['methods'][method_name];
                return_type = metadata['return_type'];
                request_type = metadata['request_type'];
                return [2 /*return*/, {
                        metadata: metadata,
                        request_type: request_type,
                        return_type: return_type,
                        return_proto_type: return_type.proto,
                        return_constructor_type: return_type.ctor,
                        isReturnTypeClass: function () {
                            return return_type.datatype === 'class';
                        }
                    }];
            });
        });
    };
    SrpcServer.prototype._getDataType = function (class_name) {
        return __awaiter(this, void 0, void 0, function () {
            var type;
            return __generator(this, function (_a) {
                type = this.root.lookupType(this.map[class_name]['proto_class_data_type']);
                if (!type)
                    throw Error('Class data type not found');
                return [2 /*return*/, type];
            });
        });
    };
    return SrpcServer;
}());
var File = /** @class */ (function () {
    function File(data) {
        this.$___class_state = data;
    }
    File.prototype.getData = function () { return this.$___class_state; };
    File.prototype.updateData = function (data) { Object.assign(this.$___class_state, data); };
    return File;
}());
exports.File = File;
var File2 = /** @class */ (function () {
    function File2() {
    }
    return File2;
}());
exports.File2 = File2;
var FileList = /** @class */ (function () {
    function FileList(data) {
        this.$___class_state = data;
    }
    FileList.prototype.getData = function () { return this.$___class_state; };
    FileList.prototype.updateData = function (data) { Object.assign(this.$___class_state, data); };
    return FileList;
}());
exports.FileList = FileList;
var SimpleRpcServer = /** @class */ (function (_super) {
    __extends(SimpleRpcServer, _super);
    function SimpleRpcServer(classes) {
        return _super.call(this, classes) || this;
    }
    return SimpleRpcServer;
}(SrpcServer));
exports.SimpleRpcServer = SimpleRpcServer;
