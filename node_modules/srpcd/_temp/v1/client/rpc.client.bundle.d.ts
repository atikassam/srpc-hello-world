declare class RpcServices {
    protected ___client: RpcClient;
    constructor(___client: RpcClient);
    _createClass(class_name: any, state: any): Promise<any>;
}
declare class RpcClient<ServicesType extends RpcServices = RpcServices> {
    protected url: string;
    protected headers: any;
    protected Services: any;
    private services;
    private _map?;
    private _root?;
    private get map();
    private get root();
    constructor(url: string, headers: any, Services: any);
    init(): Promise<ServicesType>;
    callMethod(instance: any, class_name: any, method_name: any, args: any): Promise<any>;
    private _decodeResponse;
    private _createClass;
    private _callMethod;
    private _encodeRequest;
    private _encodeWithType;
    private _getArgumentTypes;
    private _getRequestType;
    private _getReturnType;
    private _getMethodMetadata;
    private _getDataType;
}
export declare class SimpleRpcClient extends RpcClient<Services> {
    protected url: string;
    protected headers: any;
    constructor(url: string, headers: any);
}
export declare class Services extends RpcServices {
    protected ___client: RpcClient;
    constructor(___client: RpcClient);
    file: File;
    file2: File2;
    filelist: FileList;
}
export interface FileMetadata {
}
export declare class File {
    private __rpc_client;
    private callMethod;
    private $___class_state;
    getData(): FileMetadata;
    __updateData(data: Partial<FileMetadata>): void;
}
export declare class File2 {
    private __rpc_client;
    private callMethod;
}
export declare class FileList {
    private __rpc_client;
    private callMethod;
    private $___class_state;
    getData(): FileMetadata;
    __updateData(data: Partial<FileMetadata>): void;
    getFile(id: string): Promise<File>;
    getFiles(): Promise<FileMetadata[]>;
}
export {};
